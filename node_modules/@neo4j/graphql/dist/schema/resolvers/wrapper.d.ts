import { GraphQLResolveInfo, GraphQLSchema } from "graphql";
import { Driver } from "neo4j-driver";
import { Neo4jGraphQLConfig, Node, Relationship } from "../../classes";
import { Context, Neo4jGraphQLPlugins } from "../../types";
declare type WrapResolverArguments = {
    driver?: Driver;
    config: Neo4jGraphQLConfig;
    nodes: Node[];
    relationships: Relationship[];
    schema: GraphQLSchema;
    plugins?: Neo4jGraphQLPlugins;
};
export declare const wrapResolver: ({ driver, config, nodes, relationships, schema, plugins }: WrapResolverArguments) => (next: any) => (root: any, args: any, context: Context, info: GraphQLResolveInfo) => Promise<any>;
export declare const wrapSubscription: (resolverArgs: WrapResolverArguments) => (next: any) => (root: any, args: any, context: Record<string, any>, info: GraphQLResolveInfo) => any;
export {};
//# sourceMappingURL=wrapper.d.ts.map