"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConnectOrCreateAndParams = void 0;
const create_auth_and_params_1 = __importDefault(require("./create-auth-and-params"));
const constants_1 = require("../constants");
const utils_1 = require("../utils/utils");
const CypherBuilder = __importStar(require("./cypher-builder/CypherBuilder"));
const utils_2 = require("./cypher-builder/utils");
function createConnectOrCreateAndParams({ input, varName, parentVar, relationField, refNode, context, withVars, }) {
    const statements = (0, utils_1.asArray)(input).map((inputItem, index) => {
        const subqueryBaseName = `${varName}${index}`;
        const result = createConnectOrCreatePartialStatement({
            input: inputItem,
            baseName: subqueryBaseName,
            parentVar,
            relationField,
            refNode,
            context,
        });
        return result;
    });
    const query = statements.reduce((result, statement) => {
        result.concat(statement);
        return result;
    }, new CypherBuilder.Query());
    return new CypherBuilder.Call(query, withVars).build(`${varName}_`);
}
exports.createConnectOrCreateAndParams = createConnectOrCreateAndParams;
function createConnectOrCreatePartialStatement({ input, baseName, parentVar, relationField, refNode, context, }) {
    const mergeQuery = mergeStatement({
        input,
        refNode,
        context,
        relationField,
        parentNode: new CypherBuilder.NamedNode(parentVar),
    });
    const authQuery = createAuthStatement({
        node: refNode,
        context,
        nodeName: baseName,
    });
    return new CypherBuilder.Query().concat(authQuery).concat(mergeQuery);
}
function getCypherParameters(onCreateParams = {}, node) {
    const params = Object.entries(onCreateParams).reduce((acc, [key, value]) => {
        const nodeField = node === null || node === void 0 ? void 0 : node.constrainableFields.find((f) => f.fieldName === key);
        const nodeFieldName = (nodeField === null || nodeField === void 0 ? void 0 : nodeField.dbPropertyName) || (nodeField === null || nodeField === void 0 ? void 0 : nodeField.fieldName);
        const fieldName = nodeFieldName || key;
        const valueOrArray = (nodeField === null || nodeField === void 0 ? void 0 : nodeField.typeMeta.array) ? (0, utils_1.asArray)(value) : value;
        acc[fieldName] = valueOrArray;
        return acc;
    }, {});
    return (0, utils_2.convertToCypherParams)(params);
}
function mergeStatement({ input, refNode, context, relationField, parentNode, }) {
    var _a, _b, _c;
    const whereNodeParameters = getCypherParameters((_a = input.where) === null || _a === void 0 ? void 0 : _a.node, refNode);
    const onCreateNodeParameters = getCypherParameters((_b = input.onCreate) === null || _b === void 0 ? void 0 : _b.node, refNode);
    const autogeneratedParams = getAutogeneratedParams(refNode);
    const node = new CypherBuilder.Node({
        labels: refNode.getLabels(context),
        parameters: whereNodeParameters,
    });
    const unsetAutogeneratedParams = (0, utils_1.omitFields)(autogeneratedParams, Object.keys(whereNodeParameters));
    const merge = new CypherBuilder.Merge(node).onCreate({
        ...unsetAutogeneratedParams,
        ...onCreateNodeParameters,
    });
    const relationshipFields = context.relationships.find((x) => x.properties === relationField.properties);
    const autogeneratedRelationshipParams = relationshipFields ? getAutogeneratedParams(relationshipFields) : {};
    const onCreateRelationshipParams = (0, utils_2.convertToCypherParams)(((_c = input.onCreate) === null || _c === void 0 ? void 0 : _c.edge) || {});
    const relationship = new CypherBuilder.Relationship({ source: parentNode, target: node, type: relationField.type });
    const relationshipMerge = new CypherBuilder.Merge(relationship).onCreate({
        relationship: { ...autogeneratedRelationshipParams, ...onCreateRelationshipParams },
    });
    merge.concat(relationshipMerge);
    return merge;
}
function createAuthStatement({ node, context, nodeName, }) {
    if (!node.auth)
        return undefined;
    const auth = (0, create_auth_and_params_1.default)({
        entity: node,
        operations: ["CONNECT", "CREATE"],
        context,
        allow: { parentNode: node, varName: nodeName, chainStr: `${nodeName}${node.name}_allow` },
        escapeQuotes: false,
    });
    if (!auth[0])
        return undefined;
    const query = new CypherBuilder.Apoc.Validate({
        predicate: `NOT(${auth[0]})`,
        message: constants_1.AUTH_FORBIDDEN_ERROR,
    });
    query.addNamedParams((0, utils_2.convertToCypherParams)(auth[1]));
    return query;
}
// Helper for compatibility reasons
function getAutogeneratedParams(node) {
    const autogeneratedFields = node.primitiveFields
        .filter((f) => f.autogenerate)
        .reduce((acc, field) => {
        if (field.dbPropertyName) {
            acc[field.dbPropertyName] = new CypherBuilder.RawParam("randomUUID()");
        }
        return acc;
    }, {});
    const autogeneratedTemporalFields = node.temporalFields
        .filter((field) => { var _a; return ["DateTime", "Time"].includes(field.typeMeta.name) && ((_a = field.timestamps) === null || _a === void 0 ? void 0 : _a.includes("CREATE")); })
        .reduce((acc, field) => {
        if (field.dbPropertyName) {
            acc[field.dbPropertyName] = new CypherBuilder.RawParam(`${field.typeMeta.name.toLowerCase()}()`);
        }
        return acc;
    }, {});
    return { ...autogeneratedTemporalFields, ...autogeneratedFields };
}
//# sourceMappingURL=create-connect-or-create-and-params.js.map