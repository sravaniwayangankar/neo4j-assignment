"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Relationship = void 0;
const utils_1 = require("../utils");
const utils_2 = require("./utils");
class Relationship {
    constructor(input) {
        this.prefix = "this";
        this.type = input.type || undefined;
        this.parameters = input.parameters || {};
        this.source = input.source;
        this.target = input.target;
        this.directed = input.directed === undefined ? true : input.directed;
    }
    getCypher(context) {
        const referenceId = context.getVariableId(this);
        let parametersStr = "";
        if (this.hasParameters()) {
            const parameters = (0, utils_2.serializeParameters)(this.parameters, context);
            parametersStr = (0, utils_1.padLeft)(parameters);
        }
        const sourceStr = `(${this.source.getReference(context)})`;
        const targetStr = `(${this.target.getReference(context)})`;
        const arrowStr = this.getRelationshipArrow();
        const relationshipStr = `${referenceId || ""}${this.getTypeString()}${parametersStr}`;
        return `${sourceStr}-[${relationshipStr}]${arrowStr}${targetStr}`;
    }
    hasParameters() {
        return Object.keys(this.parameters).length > 0;
    }
    getRelationshipArrow() {
        return this.directed ? "->" : "-";
    }
    getTypeString() {
        return this.type ? `:${(0, utils_1.escapeLabel)(this.type)}` : "";
    }
}
exports.Relationship = Relationship;
//# sourceMappingURL=Relationship.js.map