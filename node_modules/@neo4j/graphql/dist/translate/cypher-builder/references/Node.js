"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NamedNode = exports.Node = void 0;
const utils_1 = require("../utils");
const utils_2 = require("./utils");
class Node {
    constructor(input) {
        this.prefix = "this";
        this.labels = input.labels || [];
        this.parameters = input.parameters || {};
    }
    getCypher(context) {
        const referenceId = this.getReference(context);
        let parametersStr = "";
        if (this.hasParameters()) {
            const parameters = (0, utils_2.serializeParameters)(this.parameters, context);
            parametersStr = (0, utils_1.padLeft)(parameters);
        }
        return `(${referenceId}${this.getLabelsString()}${parametersStr})`;
    }
    // TODO: should be private or protected
    getReference(context) {
        return context.getVariableId(this);
    }
    hasParameters() {
        return Object.keys(this.parameters).length > 0;
    }
    getLabelsString() {
        const escapedLabels = this.labels.map(utils_1.escapeLabel);
        if (escapedLabels.length === 0)
            return "";
        return `:${escapedLabels.join(":")}`;
    }
}
exports.Node = Node;
class NamedNode extends Node {
    constructor(name, input) {
        super(input || {});
        this.name = name;
    }
    getReference(_context) {
        return this.name;
    }
}
exports.NamedNode = NamedNode;
//# sourceMappingURL=Node.js.map