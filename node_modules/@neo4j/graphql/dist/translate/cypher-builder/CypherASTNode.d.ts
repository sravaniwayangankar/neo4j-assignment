import { CypherContext } from "./CypherContext";
import { Param } from "./references/Param";
/** Abstract class representing a Cypher Statement in the AST */
export declare abstract class CypherASTNode {
    protected children: Array<CypherASTNode>;
    protected parent?: CypherASTNode;
    protected namedParams: Record<string, Param>;
    constructor(parent?: CypherASTNode);
    getRoot(): CypherASTNode;
    /** Visitor pattern to generate the Cypher on nested nodes */
    getCypher(context: CypherContext, separator?: string): string;
    /** Defines the internal Cypher to generate by the ASTNode */
    protected abstract cypher(context: CypherContext, childrenCypher: string): string;
    protected getContext(prefix?: string): CypherContext;
    protected addStatement<C extends CypherASTNode>(astNode: C): C;
    addNamedParams(params: Record<string, Param>): void;
    protected get isRoot(): boolean;
}
//# sourceMappingURL=CypherASTNode.d.ts.map