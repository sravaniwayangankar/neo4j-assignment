"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CypherContext = void 0;
/** Hold the internal references of parameters and variables */
class CypherContext {
    constructor(prefix) {
        this.params = new Map();
        this.variables = new Map();
        this.prefix = prefix || "";
    }
    getParamId(param) {
        const id = this.params.get(param);
        if (!id) {
            return this.addParamReference(param);
        }
        return id;
    }
    getVariableId(variable) {
        const id = this.variables.get(variable);
        if (!id) {
            return this.addReference(variable);
        }
        return id;
    }
    getParams() {
        const paramList = Array.from(this.params.keys());
        return paramList.reduce((acc, param) => {
            const key = this.getParamId(param);
            acc[key] = param.value;
            return acc;
        }, {});
    }
    addNamedParamReference(name, param) {
        this.params.set(param, name);
    }
    addReference(reference) {
        const refIndex = this.variables.size;
        const referenceId = `${this.prefix}${reference.prefix}${refIndex}`;
        this.variables.set(reference, referenceId);
        return referenceId;
    }
    addParamReference(param) {
        const refIndex = this.params.size;
        const paramId = `${this.prefix}${param.prefix}${refIndex}`;
        this.params.set(param, paramId);
        return paramId;
    }
}
exports.CypherContext = CypherContext;
//# sourceMappingURL=CypherContext.js.map