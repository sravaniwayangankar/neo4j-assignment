"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Create = void 0;
const CypherASTNode_1 = require("../CypherASTNode");
const Param_1 = require("../references/Param");
const Query_1 = require("./Query");
class Create extends Query_1.Query {
    constructor(node, params, parent) {
        super(parent);
        this.node = node;
        this.params = params;
    }
    cypher(context, childrenCypher) {
        const nodeCypher = this.node.getCypher(context);
        return `CREATE ${nodeCypher}\n${this.composeSet(context)}\n${childrenCypher}`;
    }
    return(...args) {
        const returnStatement = new ReturnStatement(this, args);
        this.addStatement(returnStatement);
        return this;
    }
    composeSet(context) {
        const nodeAlias = context.getVariableId(this.node);
        const params = Object.entries(this.params).map(([key, value]) => {
            return `${nodeAlias}.${key} = ${value instanceof Param_1.Param ? value.getCypher(context) : value}`;
        });
        if (params.length === 0)
            return "";
        return `SET ${params.join(",\n")}`;
    }
}
exports.Create = Create;
class ReturnStatement extends CypherASTNode_1.CypherASTNode {
    constructor(parent, args) {
        super(parent);
        this.returnArgs = args;
    }
    cypher(context) {
        let projection = "";
        let alias = "";
        if ((this.returnArgs[1] || []).length > 0) {
            projection = ` {${this.returnArgs[1].map((s) => `.${s}`).join(", ")}}`;
        }
        if ((this.returnArgs[2] || []).length > 0) {
            alias = ` AS ${this.returnArgs[2]}`;
        }
        const nodeAlias = context.getVariableId(this.returnArgs[0]);
        return `RETURN ${nodeAlias}${projection}${alias}`;
    }
}
//# sourceMappingURL=Create.js.map