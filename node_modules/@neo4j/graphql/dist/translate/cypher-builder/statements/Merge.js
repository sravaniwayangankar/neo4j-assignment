"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Merge = void 0;
const Node_1 = require("../references/Node");
const Relationship_1 = require("../references/Relationship");
const Query_1 = require("./Query");
class Merge extends Query_1.Query {
    constructor(element, parent) {
        super(parent);
        this.onCreateParameters = { source: {}, target: {}, relationship: {} };
        this.element = element;
    }
    cypher(context, childrenCypher) {
        const mergeStr = `MERGE ${this.element.getCypher(context)}`;
        const onCreateSetStatement = this.onCreateSetStatement(context);
        const separator = onCreateSetStatement ? "\n" : "";
        return `${mergeStr}${separator}${onCreateSetStatement}\n${childrenCypher}`;
    }
    onCreate(onCreate) {
        let parameters;
        if (this.element instanceof Node_1.Node) {
            parameters = { source: onCreate };
        }
        else {
            parameters = onCreate;
        }
        this.mergeOnCreateParamenters(parameters);
        return this;
    }
    mergeOnCreateParamenters(options) {
        this.onCreateParameters = {
            source: { ...this.onCreateParameters.source, ...(options.source || {}) },
            target: { ...this.onCreateParameters.target, ...(options.target || {}) },
            relationship: { ...this.onCreateParameters.relationship, ...(options.relationship || {}) },
        };
    }
    onCreateSetStatement(context) {
        const source = this.element instanceof Relationship_1.Relationship ? this.element.source : this.element;
        const sourceId = context.getVariableId(source);
        let onCreateStatements = Object.entries(this.onCreateParameters.source).map(([key, value]) => {
            return `${sourceId}.${key} = ${value.getCypher(context)}`;
        });
        if (this.element instanceof Relationship_1.Relationship) {
            const relationshipId = context.getVariableId(this.element);
            const relationshipOnCreateStatements = Object.entries(this.onCreateParameters.relationship).map(([key, value]) => {
                return `${relationshipId}.${key} = ${value.getCypher(context)}`;
            });
            const targetOnCreateStatements = Object.entries(this.onCreateParameters.target).map(([key, value]) => {
                return `${relationshipId}.${key} = ${value.getCypher(context)}`;
            });
            onCreateStatements = [
                ...onCreateStatements,
                ...relationshipOnCreateStatements,
                ...targetOnCreateStatements,
            ];
        }
        if (onCreateStatements.length === 0)
            return "";
        return `ON CREATE SET
        ${onCreateStatements.join(",\n")}`;
    }
}
exports.Merge = Merge;
//# sourceMappingURL=Merge.js.map